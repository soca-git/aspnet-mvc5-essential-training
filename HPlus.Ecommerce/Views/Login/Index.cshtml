
@model HPlus.Ecommerce.Models.Login
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

    <div class="container">
        <!--<form action="@Request.Url.PathAndQuery" method="post" class="form-signin">-->
        <!-- The using helper provides a dynamic (instead of hard-coded html!) way to implement the form. -->
        <!-- Request.QueryString provides a way to access parameters in the url of the current request. -->
        <!-- In this case, the ReturnUrl which is defined in the FormsAuthentication package. -->
        @using (Html.BeginForm(
            "Index",
            "Login",
            new { ReturnUrl = Request.QueryString["ReturnUrl"] },
            FormMethod.Post,
            new { @class = "form-signin" }
        ))
        {
        <!-- if (ViewBag.Failed == true) - alternative custom check using viewbag. -->
        <!-- Here, we check for the IsPost property of the view. -->
        <!-- Since the webpage will only redisplay this form on a post request, -->
        <!-- the IsPost check is enough to check for an invalid login attempt. -->
            if (IsPost)
            {
            <div class="alert alert-danger">Invalid Login Attempt!</div>
            }
        <h2 class="form-signin-heading">Please sign in</h2>
        <!--<label for="username" class="sr-only">Email address</label>-->
        <!-- Html helper LabelFor method. Creates a label for the username field, -->
        <!-- using the Model username property through a lambda function. -->
        <!-- The 'at' symbol before class escapes the class definition, which is a reserved word in C#. -->
        <!-- The class property here refers to the property of the element, and is passed a pre-made bootstrap class. -->
        @Html.LabelFor(m => m.Username, "Email address", new { @class = "control-label" })
        <!-- Html helper TextBoxFor method. -->
        @Html.TextBoxFor(m => m.Username, new { @class = "form-control", placeholder = "Email Address", autofocus = "" })

        <!-- Html helpers are used in MVC5 to implement strongly-typed models into the view templates. -->
        <!-- Now, if a model property is changed and the view is expecting a certain type, this will be flagged in the debugger. -->
        <!-- This means that we can catch view errors in the compilation step. -->

        <!-- Added the model property to the username element, with a null model defaulting to blank space. -->
        <!--<input id="username" name="username" class="form-control" placeholder="Email address" autofocus="" value="@(Model?.Username ?? "")">-->
        <label for="password" class="sr-only">Password</label>
        <input type="password" id="password" name="password" class="form-control" placeholder="Password">
        <div class="checkbox">
            <label>
                <input type="checkbox" value="remember-me"> Remember me
            </label>
        </div>
        <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
        }
        <!--</form>-->
    </div>